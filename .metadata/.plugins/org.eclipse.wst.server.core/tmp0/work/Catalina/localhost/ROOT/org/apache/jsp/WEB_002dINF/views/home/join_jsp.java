/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.76
 * Generated at: 2023-08-31 10:11:39 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.home;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class join_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("\r\n");
      out.write(".login-wrapper{\r\n");
      out.write("    font-family: 'Noto Sans KR', sans-serif;\r\n");
      out.write("    width: 500px;\r\n");
      out.write("    padding: 40px;\r\n");
      out.write("    box-sizing: border-box;\r\n");
      out.write("    margin: auto;\r\n");
      out.write("    font-size: 14px;\r\n");
      out.write("    /* padding-top: 100px; */\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".login-wrapper > h1{\r\n");
      out.write("    font-size: 60px;\r\n");
      out.write("    color: #FFA629;\r\n");
      out.write("    margin-bottom: 40px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("#login-form > div input{\r\n");
      out.write("	width:95%;\r\n");
      out.write("    height: 50px;\r\n");
      out.write("    padding: 0 10px;\r\n");
      out.write("/*     box-sizing: border-box; */\r\n");
      out.write("	margin:15px 0px;\r\n");
      out.write("    border-radius: 6px;\r\n");
      out.write("    background-color: #F3F1EF;\r\n");
      out.write("    border:none;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#login-form > div input::placeholder{\r\n");
      out.write("    color: #C4C4C4;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#login-form > div input[type=\"submit\"]{\r\n");
      out.write("    color: #fff;\r\n");
      out.write("    font-size: 16px;\r\n");
      out.write("    background-color: #FFA629;\r\n");
      out.write("    margin-top: 15px;\r\n");
      out.write("}\r\n");
      out.write("#term-use{margin-top:50px;margin-right:10px;}\r\n");
      out.write("#term-use ul li{\r\n");
      out.write("	list-style-type: none;\r\n");
      out.write("}\r\n");
      out.write("#term-use input[type=\"checkbox\"]{\r\n");
      out.write("	width:18px;\r\n");
      out.write("	height:16px;\r\n");
      out.write("	margin-right:5px;\r\n");
      out.write("}\r\n");
      out.write("#term-use span{\r\n");
      out.write("	font-size: 18px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".content{\r\n");
      out.write("	color:black;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write(".button-link {\r\n");
      out.write(" 	display: inline-block;\r\n");
      out.write("  	padding: 10px 20px;\r\n");
      out.write(" 	background-color: #F3F1EF;\r\n");
      out.write("  	text-decoration: none;\r\n");
      out.write("  	border-radius: 5px;\r\n");
      out.write(" 	box-sizing:border;\r\n");
      out.write("	width:60px;\r\n");
      out.write("	margin-left:10px;\r\n");
      out.write("	border-radius: 8px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#termuse a {\r\n");
      out.write("	text-decoration: none;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("</style>\r\n");
      out.write("<!-- 구글 폰트 -->\r\n");
      out.write("<link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\r\n");
      out.write("<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\r\n");
      out.write("<link href=\"https://fonts.googleapis.com/css2?family=Bagel+Fat+One&family=Noto+Sans+KR&display=swap\" rel=\"stylesheet\">\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("	\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<header>\r\n");
      out.write("	");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "home_top.jsp", out, false);
      out.write("\r\n");
      out.write("	</header>\r\n");
      out.write("    <div class=\"login-wrapper\">\r\n");
      out.write("        <h1 style=\"text-align: center;font-family: 'Bagel Fat One', cursive;\">Join Us</h1>\r\n");
      out.write("        <form method=\"post\" action=\"\" id=\"login-form\">\r\n");
      out.write("        	<div style=\"display: flex; align-items: center;\">\r\n");
      out.write("             	<!-- 요청 정보(request)  -->\r\n");
      out.write("	           	<input type=\"text\" name=\"nickname\" id=\"nickname\" maxlength=\"20\" placeholder=\"닉네임(2~20자/한글,영문자 대소문자,숫자만 입력)\" required> &nbsp;&nbsp;&nbsp;\r\n");
      out.write("	           	<!-- db로 가서 닉네임 중복 체크함 -->	\r\n");
      out.write("	           	<input type=\"button\" onclick=\"\" value=\"중복체크\" id=\"nick_dupl\" style=\"width:80px; display:none;\">\r\n");
      out.write("           	</div>\r\n");
      out.write("        	<!-- 닉네임 유효성 검사 메세지 -->\r\n");
      out.write("           	<div id=\"nickCheck\" style=\"width:400px;\"></div>\r\n");
      out.write("           	<div style=\"display: flex; align-items: center;\">\r\n");
      out.write("             	<!-- 요청 정보(request)  -->\r\n");
      out.write("            	<input type=\"text\" name=\"user_id\" id=\"user_id\" maxlength=\"20\" placeholder=\"아이디 입력(8~20자/영문자 대소문자,숫자만 입력)\"  required> &nbsp;&nbsp;&nbsp;\r\n");
      out.write("				<!-- db로 가서 아이디 중복 체크함 -->	\r\n");
      out.write("            	<input type=\"button\" onclick=\"\" value=\"중복체크\" id=\"id_dupl\" style=\"width:80px; display:none;\">\r\n");
      out.write("            </div>\r\n");
      out.write("            <!-- 아이디 유효성 검사 메세지 -->\r\n");
      out.write("            <div id=\"idCheck\" style=\"width:400px;\"></div>\r\n");
      out.write("            <div style=\"display: flex; align-items: center;\">\r\n");
      out.write("             	<!-- 요청 정보(request)  -->\r\n");
      out.write("            	<input type=\"text\" name=\"email\" id=\"email\" maxlength=\"20\" placeholder=\"이메일\" required> &nbsp;&nbsp;&nbsp;\r\n");
      out.write("				<!-- db로 가서 이메일 중복 체크함 -->	\r\n");
      out.write("            	<input type=\"button\" onclick=\"\" value=\"중복체크\" id=\"email_dupl\" style=\"width:80px; display:none;\">\r\n");
      out.write("            </div>\r\n");
      out.write("            <!-- 이메일 유효성 검사 메세지 -->\r\n");
      out.write("            <div id=\"emailCheck\" style=\"width:400px;\"></div>\r\n");
      out.write("             <div>\r\n");
      out.write("             	<!-- 요청 정보(request) -->\r\n");
      out.write("             	<input type=\"password\" name=\"pw\" id=\"password\" maxlength=\"20\" placeholder=\"비밀번호 8자 이상, 20자 미만\" required>\r\n");
      out.write("             	<label style=\"color:#C4C4C4\">* 비밀번호는 특수문자(#?!@$%^&*-) 중 하나를 포함 해야합니다.</label>\r\n");
      out.write("             	<!-- 비밀번호 확인란 -->\r\n");
      out.write("             	<input type=\"password\" name=\"pwchk\" id=\"passwordChk\" maxlength=\"20\" placeholder=\"비밀번호 확인\" required>\r\n");
      out.write("             	<!-- 비밀번호 일치 여부 -->\r\n");
      out.write("             	<div id=\"matchMessage\" style=\"width:400px;height:15px; margin-bottom:10px;\"></div>\r\n");
      out.write("             	<!-- 비밀번호 정규식 특수문자 검사 -->	\r\n");
      out.write("             	<div id=\"validationMessage\" style=\"width:400px;height:15px;\"></div> \r\n");
      out.write("             </div>\r\n");
      out.write("             <div id=\"term-use\">\r\n");
      out.write("             		<ul>\r\n");
      out.write("             			<li><input type=\"checkbox\"><span><b>모두 동의</b></span></li>\r\n");
      out.write("             			<li><input type=\"checkbox\"><span>서비스 이용약관 동의</span><a href=\"https://www.naver.com\" target=\"_blank\" class=\"button-link\" style=\"margin-left:75px;\">내용보기</a></li>             			\r\n");
      out.write("             			<li><input type=\"checkbox\"><span>개인정보 수집 및 이용 동의</span><a href=\"https://www.naver.com\" target=\"_blank\" class=\"button-link\" style=\"margin-left:33px;\">내용보기</a></li>\r\n");
      out.write("             			<li><input type=\"checkbox\"><span>만 14세 이상입니다</span></li>\r\n");
      out.write("             			<li><input type=\"checkbox\"><span>(선택) 마케팅 정보 수신 동의</span><a href=\"https://www.naver.com\" target=\"_blank\" class=\"button-link\" style=\"margin-left:20px;\">내용보기</a></li>\r\n");
      out.write("             			<!-- 모두 동의 누르면 모든 버튼 눌려야 되고 / 모두 동의 or 선택 제외한 체크박스 눌리면 회원가입 버튼 누를 수 있음 -->\r\n");
      out.write("             		</ul>\r\n");
      out.write("             </div>\r\n");
      out.write("             <div>\r\n");
      out.write("             	<input type=\"submit\" id =\"join\" value=\"회원가입\" style=\"width:200px; margin-left: 100px; margin-top:20px;\"> \r\n");
      out.write("             </div>\r\n");
      out.write("        </form>\r\n");
      out.write("    </div>\r\n");
      out.write("    \r\n");
      out.write("    <script type=\"text/javascript\">\r\n");
      out.write("		var passwordInput = document.getElementById(\"password\"); //비밀번호\r\n");
      out.write("		var passwordChkInput = document.getElementById(\"passwordChk\"); //비밀번호 확인\r\n");
      out.write("		var matchMessage = document.getElementById(\"matchMessage\"); // 비밀번호 일치/불일치 메세지\r\n");
      out.write("	    var validationMessage = document.getElementById(\"validationMessage\"); // 비밀번호 정규식\r\n");
      out.write("		var user_id = document.getElementById(\"user_id\"); //유저 아이디 \r\n");
      out.write("		var email = document.getElementById(\"email\"); //이메일\r\n");
      out.write("		var nicknameInput = document.getElementById(\"nickname\");//닉네임\r\n");
      out.write("		\r\n");
      out.write("	    // 1.비밀번호 일치 펑션\r\n");
      out.write("		function checkPasswordMatch() {\r\n");
      out.write("		// 변수는 script 내부 최상단에 위치\r\n");
      out.write("			var password = passwordInput.value;\r\n");
      out.write("			var passwordChk = passwordChkInput.value;\r\n");
      out.write("			\r\n");
      out.write("			if(password == null && passwordChk == null){\r\n");
      out.write("		        matchMessage.textContent = null;				\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("		    if (password === passwordChk) {\r\n");
      out.write("		        matchMessage.textContent = \"*비밀번호가 일치합니다.\";\r\n");
      out.write("		        matchMessage.style.color = \"green\";\r\n");
      out.write("		    } else {\r\n");
      out.write("		        matchMessage.textContent = \"*비밀번호가 일치하지 않습니다.\";\r\n");
      out.write("		        matchMessage.style.color = \"red\";\r\n");
      out.write("		    }\r\n");
      out.write("			\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("	    // 2.비밀번호 유효성 펑션(8자 이상 20자 미만, 특수문자)\r\n");
      out.write("		  function validatePassword() {\r\n");
      out.write("			// 변수는 script 내부 최상단에 위치\r\n");
      out.write("	            var password = passwordInput.value;\r\n");
      out.write("	            var pattern = /^(?=.*?[A-Za-z])(?=.*?[0-9])(?=.*?[#?!@$ %^&*-]).{8,20}$/;\r\n");
      out.write("	            \r\n");
      out.write("	            if (!pattern.test(password)) {\r\n");
      out.write("	            	validationMessage.textContent = \"*비밀번호는 8자 이상, 20자 미만 또는 특수문자(#?!@$ %^&*-)를 포함해야 합니다.\";\r\n");
      out.write("		            validationMessage.style.color = \"red\";\r\n");
      out.write("		            validationMessage.style.marginBottom = \"10px\";\r\n");
      out.write("	            }else{\r\n");
      out.write("	            	validationMessage.textContent = \"\";\r\n");
      out.write("	            }\r\n");
      out.write("	            \r\n");
      out.write("	        }\r\n");
      out.write("	    \r\n");
      out.write("		  // 3.유저 아이디 유효성 검사\r\n");
      out.write("		  \r\n");
      out.write("		  function IDLengthChk() {\r\n");
      out.write("			// 변수는 script 내부 최상단에 위치\r\n");
      out.write("	            var user_id_Input = user_id.value;\r\n");
      out.write("	            var pattern = /^(?=.*?[A-Za-z])(?=.*?[0-9]).{8,20}$/;\r\n");
      out.write("	            \r\n");
      out.write("	            \r\n");
      out.write("	            if (!pattern.test(user_id_Input)) {\r\n");
      out.write("	            	idCheck.textContent = \"*아이디 입력 조건을 확인해 주세요\";\r\n");
      out.write("	            	id_dupl.style.display= \"none\";// 중복체크 버튼 비활성화\r\n");
      out.write("	            	idCheck.style.color = \"red\";\r\n");
      out.write("	            }else{\r\n");
      out.write("	            	idCheck.textContent = \"*유효한 아이디입니다. 중복체크를 진행해주세요.\";\r\n");
      out.write("	            	id_dupl.style.display= \"\"; // 중복체크 버튼 활성화\r\n");
      out.write("	            	idCheck.style.color = \"green\";\r\n");
      out.write("	            }\r\n");
      out.write("	        }\r\n");
      out.write("		  \r\n");
      out.write("		\r\n");
      out.write("		  // 4.이메일 유효성 검사\r\n");
      out.write("		  \r\n");
      out.write("		  function emailChk() {\r\n");
      out.write("			// 변수는 script 내부 최상단에 위치\r\n");
      out.write("	            var emailInput = email.value;\r\n");
      out.write("	            var pattern = /^([a-z0-9_\\.-]+)@([\\da-z\\.-]+)\\.([a-z\\.]{2,6})$/;\r\n");
      out.write("	            \r\n");
      out.write("	            if (!pattern.test(emailInput)) {\r\n");
      out.write("	            	emailCheck.textContent = \"*올바른 이메일 형식이 아닙니다.\";\r\n");
      out.write("	            	email_dupl.style.display= \"none\";// 중복체크 버튼 비활성화\r\n");
      out.write("	            	emailCheck.style.color = \"red\";	            	\r\n");
      out.write("	            }else{\r\n");
      out.write("	            	emailCheck.textContent = \"*이메일 중복체크를 진행해 주세요\";\r\n");
      out.write("	            	email_dupl.style.display= \"\"; // 중복체크 버튼 활성화\r\n");
      out.write("	            	emailCheck.style.color = \"green\";\r\n");
      out.write("	            }\r\n");
      out.write("	        }\r\n");
      out.write("		// 5. 닉네임 유효성 검사\r\n");
      out.write("		function nickChk(){\r\n");
      out.write("			// 변수는 script 내부 최상단에 위치\r\n");
      out.write("			var nicknameInput = nickname.value;\r\n");
      out.write("			var pattern = /^[A-Za-z0-9가-힣].{2,20}$/;\r\n");
      out.write("			\r\n");
      out.write("			if(!pattern.test(nicknameInput)){\r\n");
      out.write("				nickCheck.textContent = \"*닉네임 조건을 확인해주세요.\"\r\n");
      out.write("				nick_dupl.style.display=\"none\"; //중복체크 버튼 비활성화\r\n");
      out.write("				nickCheck.style.color = \"red\";\r\n");
      out.write("			}else{\r\n");
      out.write("				nickCheck.textContent = \"*유효한 닉네임 방식입니다.\"\r\n");
      out.write("				nick_dupl.style.display = \"\"; //중복체크 버튼 활성화\r\n");
      out.write("				nickCheck.style.color = \"green\";\r\n");
      out.write("			}\r\n");
      out.write("		}\r\n");
      out.write("		  \r\n");
      out.write("		passwordInput.addEventListener(\"input\", checkPasswordMatch); // 1. 비밀번호칸 이벤트 리스너\r\n");
      out.write("		passwordChkInput.addEventListener(\"input\", checkPasswordMatch); // 1. 비밀번호 확인칸 이벤트 리스너\r\n");
      out.write("		passwordInput.addEventListener(\"input\", validatePassword);   // 2. 비밀번호 정규식 확인 이벤트 리스너\r\n");
      out.write("		\r\n");
      out.write("		user_id.addEventListener(\"input\", IDLengthChk); // 3. 유저아이디 유효성 검사\r\n");
      out.write("		email.addEventListener(\"input\", emailChk);		// 4. 이메일 유효성 검사\r\n");
      out.write("		nickname.addEventListener(\"input\", nickChk);	// 5. 닉네임 유효성 검사\r\n");
      out.write("		\r\n");
      out.write("		// 비밀번호가 같고 === / 아이디, 이메일, 닉네임 중복체크도 했고 / 모든 칸이 다 입력되어 있으면 회원가입 submit 활성화\r\n");
      out.write("		// 체크박스도 체크 되어 있어야 회원가입 버튼 누를 수 있음\r\n");
      out.write("		// 중복체크 완료 됐으면 nickCheck.textContent,emailCheck.textContent,idCheck.textContent\r\n");
      out.write("		// 중복체크 완료 메세지 띄우기\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("	</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
