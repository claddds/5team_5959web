/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.76
 * Generated at: 2023-08-31 06:47:57 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.place;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class place_005fmain_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"utf-8\">\n");
      out.write("<title>플레이스</title>\n");
      out.write("<style>\n");
      out.write("	#minibanner img {\n");
      out.write("		width: 1920px;\n");
      out.write("		height: 200px;\n");
      out.write("		display: flex;\n");
      out.write("		place-items: center;\n");
      out.write("		margin: auto;\n");
      out.write("		margin-top: 20px;\n");
      out.write("		margin-bottom: 20px;\n");
      out.write("	}\n");
      out.write("\n");
      out.write("	.map_wrap, .map_wrap * {\n");
      out.write("		margin: 0;\n");
      out.write("		padding: 0;\n");
      out.write("		font-family: 'Malgun Gothic', dotum, '돋움', sans-serif;\n");
      out.write("		font-size: 12px;\n");
      out.write("	}\n");
      out.write("	\n");
      out.write("	.map_wrap a, .map_wrap a:hover, .map_wrap a:active {\n");
      out.write("		color: #000;\n");
      out.write("		text-decoration: none;\n");
      out.write("	}\n");
      out.write("	\n");
      out.write("	.map_wrap {\n");
      out.write("		position: relative;\n");
      out.write("		width: 1600px;;\n");
      out.write("		height: 800px;\n");
      out.write("		text-align: center;\n");
      out.write("		margin: 0 auto;\n");
      out.write("		display: grid;\n");
      out.write("		place-items: center;\n");
      out.write("		gap:15px;\n");
      out.write("		margin-bottom: 30px;\n");
      out.write("	}\n");
      out.write("\n");
      out.write("	/* 키워드로 장소검색하고 목록으로 표출하기 스타일 */\n");
      out.write("	#menu_wrap {\n");
      out.write("		position: absolute;\n");
      out.write("		top: 0;\n");
      out.write("		left: 0;\n");
      out.write("		bottom: 0;\n");
      out.write("		width: 250px;\n");
      out.write("		margin: 10px 0 30px 10px;\n");
      out.write("		padding: 5px;\n");
      out.write("		overflow-y: auto;\n");
      out.write("		background: rgba(255, 255, 255, 0.7);\n");
      out.write("		z-index: 1;\n");
      out.write("		font-size: 12px;\n");
      out.write("		border-radius: 10px;\n");
      out.write("	}\n");
      out.write("	\n");
      out.write("	.bg_white {\n");
      out.write("		background: #fff;\n");
      out.write("	}\n");
      out.write("	\n");
      out.write("	#menu_wrap hr {\n");
      out.write("		display: block;\n");
      out.write("		height: 1px;\n");
      out.write("		border: 0;\n");
      out.write("		border-top: 2px solid #5F5F5F;\n");
      out.write("		margin: 3px 0;\n");
      out.write("	}\n");
      out.write("	\n");
      out.write("	#menu_wrap .option {\n");
      out.write("		text-align: center;\n");
      out.write("	}\n");
      out.write("	\n");
      out.write("	#menu_wrap .option p {\n");
      out.write("		margin: 10px 0;\n");
      out.write("	}\n");
      out.write("	\n");
      out.write("	#menu_wrap .option button {\n");
      out.write("		margin-left: 5px;\n");
      out.write("	}\n");
      out.write("	\n");
      out.write("	#placesList li {\n");
      out.write("		list-style: none;\n");
      out.write("	}\n");
      out.write("	\n");
      out.write("	#placesList .item {\n");
      out.write("		position: relative;\n");
      out.write("		border-bottom: 1px solid #888;\n");
      out.write("		overflow: hidden;\n");
      out.write("		cursor: pointer;\n");
      out.write("		min-height: 65px;\n");
      out.write("	}\n");
      out.write("	\n");
      out.write("	#placesList .item span {\n");
      out.write("		display: block;\n");
      out.write("		margin-top: 4px;\n");
      out.write("	}\n");
      out.write("	\n");
      out.write("	#placesList .item h5, #placesList .item .info {\n");
      out.write("		text-overflow: ellipsis;\n");
      out.write("		overflow: hidden;\n");
      out.write("		white-space: nowrap;\n");
      out.write("	}\n");
      out.write("	\n");
      out.write("	#placesList .item .info {\n");
      out.write("		padding: 10px 0 10px 55px;\n");
      out.write("	}\n");
      out.write("	\n");
      out.write("	#placesList .info .gray {\n");
      out.write("		color: #8a8a8a;\n");
      out.write("	}\n");
      out.write("	\n");
      out.write("	#placesList .info .jibun {\n");
      out.write("		padding-left: 26px;\n");
      out.write("		background:\n");
      out.write("			url(https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/places_jibun.png)\n");
      out.write("			no-repeat;\n");
      out.write("	}\n");
      out.write("	\n");
      out.write("	#placesList .info .tel {\n");
      out.write("		color: #009900;\n");
      out.write("	}\n");
      out.write("	\n");
      out.write("	#placesList .item .markerbg {\n");
      out.write("		float: left;\n");
      out.write("		position: absolute;\n");
      out.write("		width: 36px;\n");
      out.write("		height: 37px;\n");
      out.write("		margin: 10px 0 0 10px;\n");
      out.write("		background:\n");
      out.write("			url(https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/marker_number_blue.png)\n");
      out.write("			no-repeat;\n");
      out.write("	}\n");
      out.write("	\n");
      out.write("	#placesList .item .marker_1 {\n");
      out.write("		background-position: 0 -10px;\n");
      out.write("	}\n");
      out.write("	\n");
      out.write("	#placesList .item .marker_2 {\n");
      out.write("		background-position: 0 -56px;\n");
      out.write("	}\n");
      out.write("	\n");
      out.write("	#placesList .item .marker_3 {\n");
      out.write("		background-position: 0 -102px\n");
      out.write("	}\n");
      out.write("	\n");
      out.write("	#placesList .item .marker_4 {\n");
      out.write("		background-position: 0 -148px;\n");
      out.write("	}\n");
      out.write("	\n");
      out.write("	#placesList .item .marker_5 {\n");
      out.write("		background-position: 0 -194px;\n");
      out.write("	}\n");
      out.write("	\n");
      out.write("	#placesList .item .marker_6 {\n");
      out.write("		background-position: 0 -240px;\n");
      out.write("	}\n");
      out.write("	\n");
      out.write("	#placesList .item .marker_7 {\n");
      out.write("		background-position: 0 -286px;\n");
      out.write("	}\n");
      out.write("	\n");
      out.write("	#placesList .item .marker_8 {\n");
      out.write("		background-position: 0 -332px;\n");
      out.write("	}\n");
      out.write("	\n");
      out.write("	#placesList .item .marker_9 {\n");
      out.write("		background-position: 0 -378px;\n");
      out.write("	}\n");
      out.write("	\n");
      out.write("	#placesList .item .marker_10 {\n");
      out.write("		background-position: 0 -423px;\n");
      out.write("	}\n");
      out.write("	\n");
      out.write("	#placesList .item .marker_11 {\n");
      out.write("		background-position: 0 -470px;\n");
      out.write("	}\n");
      out.write("	\n");
      out.write("	#placesList .item .marker_12 {\n");
      out.write("		background-position: 0 -516px;\n");
      out.write("	}\n");
      out.write("	\n");
      out.write("	#placesList .item .marker_13 {\n");
      out.write("		background-position: 0 -562px;\n");
      out.write("	}\n");
      out.write("	\n");
      out.write("	#placesList .item .marker_14 {\n");
      out.write("		background-position: 0 -608px;\n");
      out.write("	}\n");
      out.write("	\n");
      out.write("	#placesList .item .marker_15 {\n");
      out.write("		background-position: 0 -654px;\n");
      out.write("	}\n");
      out.write("	\n");
      out.write("	#pagination {\n");
      out.write("		margin: 10px auto;\n");
      out.write("		text-align: center;\n");
      out.write("	}\n");
      out.write("	\n");
      out.write("	#pagination a {\n");
      out.write("		display: inline-block;\n");
      out.write("		margin-right: 10px;\n");
      out.write("	}\n");
      out.write("	\n");
      out.write("	#pagination .on {\n");
      out.write("		font-weight: bold;\n");
      out.write("		cursor: default;\n");
      out.write("		color: #777;\n");
      out.write("	}\n");
      out.write("	footer{\n");
      out.write("		width:1920px;\n");
      out.write("		display:flex;\n");
      out.write("		margin:auto;\n");
      out.write("		margin-top:20px;\n");
      out.write("		margin-bottom: 20px;\n");
      out.write("	}\n");
      out.write("	\n");
      out.write("	/* 카테고리별 장소 검색하기 스타일 */\n");
      out.write("	#category {position:absolute;top:10px;left:300px;border-radius: 5px; border:1px solid #909090;box-shadow: 0 1px 1px rgba(0, 0, 0, 0.4);background: #fff;overflow: hidden;z-index: 2;}\n");
      out.write("	#category li {float:left;list-style: none;width:50px;px;border-right:1px solid #acacac;padding:6px 0;text-align: center; cursor: pointer;}\n");
      out.write("	#category li.on {background: #eee;}\n");
      out.write("	#category li:hover {background: #ffe6e6;border-left:1px solid #acacac;margin-left: -1px;}\n");
      out.write("	#category li:last-child{margin-right:0;border-right:0;}\n");
      out.write("	#category li span {display: block;margin:0 auto 3px;width:27px;height: 28px;}\n");
      out.write("	#category li .category_bg {background:url(https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/places_category.png) no-repeat;}\n");
      out.write("	#category li .bank {background-position: -10px 0;}\n");
      out.write("	#category li .mart {background-position: -10px -36px;}\n");
      out.write("	#category li .pharmacy {background-position: -10px -72px;}\n");
      out.write("	#category li .oil {background-position: -10px -108px;}\n");
      out.write("	#category li .cafe {background-position: -10px -144px;}\n");
      out.write("	#category li .store {background-position: -10px -180px;}\n");
      out.write("	#category li.on .category_bg {background-position-x:-46px;}\n");
      out.write("	.placeinfo_wrap {position:absolute;bottom:28px;left:-150px;width:300px;}\n");
      out.write("	.placeinfo {position:relative;width:100%;border-radius:6px;border: 1px solid #ccc;border-bottom:2px solid #ddd;padding-bottom: 10px;background: #fff;}\n");
      out.write("	.placeinfo:nth-of-type(n) {border:0; box-shadow:0px 1px 2px #888;}\n");
      out.write("	.placeinfo_wrap .after {content:'';position:relative;margin-left:-12px;left:50%;width:22px;height:12px;background:url('https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/vertex_white.png')}\n");
      out.write("	.placeinfo a, .placeinfo a:hover, .placeinfo a:active{color:#fff;text-decoration: none;}\n");
      out.write("	.placeinfo a, .placeinfo span {display: block;text-overflow: ellipsis;overflow: hidden;white-space: nowrap;}\n");
      out.write("	.placeinfo span {margin:5px 5px 0 5px;cursor: default;font-size:13px;}\n");
      out.write("	.placeinfo .title {font-weight: bold; font-size:14px;border-radius: 6px 6px 0 0;margin: -1px -1px 0 -1px;padding:10px; color: #fff;background: #d95050;background: #d95050 url(https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/arrow_white.png) no-repeat right 14px center;}\n");
      out.write("	.placeinfo .tel {color:#0f7833;}\n");
      out.write("	.placeinfo .jibun {color:#999;font-size:11px;margin-top:0;}\n");
      out.write("</style>\n");
      out.write("\n");
      out.write("<script type=\"text/javascript\">\n");
      out.write("	\n");
      out.write("</script>\n");
      out.write("</head>\n");
      out.write("\n");
      out.write("<body>\n");
      out.write("	<header>\n");
      out.write("		");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/WEB-INF/views/home/home_top.jsp", out, false);
      out.write("\n");
      out.write("	</header>\n");
      out.write("\n");
      out.write("	<div id=minibanner>\n");
      out.write("		<a href=\"/placemaindisplay.do\"><img src=\"resources/images/page_banner/listbanner_place.png\"></a>\n");
      out.write("	</div>\n");
      out.write("	\n");
      out.write("	<div class=\"map_wrap\">\n");
      out.write("		<div id=\"map\" style=\"width:100%;height:100%;position:relative;overflow:hidden;\"></div>\n");
      out.write("		<div id=\"menu_wrap\" class=\"bg_white\">\n");
      out.write("			<div class=\"option\">\n");
      out.write("				<div>\n");
      out.write("					<form onsubmit=\"searchPlaces_keyword(); return false;\">\n");
      out.write("						지역 또는 상호명 입력: <input type=\"text\" value=\"신촌역\" id=\"keyword\" size=\"15\">\n");
      out.write("						<button type=\"submit\">검색하기</button>\n");
      out.write("					</form>\n");
      out.write("				</div>\n");
      out.write("			</div>\n");
      out.write("			<hr>\n");
      out.write("			<ul id=\"placesList\"></ul>\n");
      out.write("			<div id=\"pagination\"></div>\n");
      out.write("		</div>\n");
      out.write("		 <ul id=\"category\">\n");
      out.write("        <li id=\"BK9\" data-order=\"0\"> \n");
      out.write("            <span class=\"category_bg bank\"></span>\n");
      out.write("            은행\n");
      out.write("        </li>       \n");
      out.write("        <li id=\"MT1\" data-order=\"1\"> \n");
      out.write("            <span class=\"category_bg mart\"></span>\n");
      out.write("            마트\n");
      out.write("        </li>  \n");
      out.write("        <li id=\"PM9\" data-order=\"2\"> \n");
      out.write("            <span class=\"category_bg pharmacy\"></span>\n");
      out.write("            약국\n");
      out.write("        </li>  \n");
      out.write("        <li id=\"OL7\" data-order=\"3\"> \n");
      out.write("            <span class=\"category_bg oil\"></span>\n");
      out.write("            주유소\n");
      out.write("        </li>  \n");
      out.write("        <li id=\"CE7\" data-order=\"4\"> \n");
      out.write("            <span class=\"category_bg cafe\"></span>\n");
      out.write("            카페\n");
      out.write("        </li>  \n");
      out.write("        <li id=\"CS2\" data-order=\"5\"> \n");
      out.write("            <span class=\"category_bg store\"></span>\n");
      out.write("            편의점\n");
      out.write("        </li>      \n");
      out.write("    </ul>\n");
      out.write("	</div>\n");
      out.write("	<footer>\n");
      out.write("		");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/WEB-INF/views/home/home_bottom.jsp", out, false);
      out.write("\n");
      out.write("	</footer>\n");
      out.write("	<script type=\"text/javascript\"\n");
      out.write("		src=\"//dapi.kakao.com/v2/maps/sdk.js?appkey=208825c3c44bfdb13dfa9f140f9c81f1&libraries=services\"></script>\n");
      out.write("	<script>\n");
      out.write("		// 마커를 클릭했을 때 해당 장소의 상세정보를 보여줄 커스텀오버레이입니다\n");
      out.write("		var placeOverlay = new kakao.maps.CustomOverlay({zIndex:1}), \n");
      out.write("	    	contentNode = document.createElement('div'), // 커스텀 오버레이의 컨텐츠 엘리먼트 입니다 \n");
      out.write("	   		markers = [], // 마커를 담을 배열입니다\n");
      out.write("	    	currCategory = ''; // 현재 선택된 카테고리를 가지고 있을 변수입니다\n");
      out.write("\n");
      out.write("		var mapContainer = document.getElementById('map'), // 지도를 표시할 div \n");
      out.write("		mapOption = {\n");
      out.write("			center : new kakao.maps.LatLng(37.566826, 126.9786567), // 지도의 중심좌표\n");
      out.write("			level : 5	// 지도의 확대 레벨\n");
      out.write("		};\n");
      out.write("\n");
      out.write("		// 지도를 생성합니다    \n");
      out.write("		var map = new kakao.maps.Map(mapContainer, mapOption);\n");
      out.write("\n");
      out.write("		// 장소 검색 객체를 생성합니다\n");
      out.write("		var ps = new kakao.maps.services.Places(map);\n");
      out.write("		\n");
      out.write("		// 지도에 idle 이벤트를 등록합니다\n");
      out.write("		kakao.maps.event.addListener(map, 'idle', searchPlaces);\n");
      out.write("		\n");
      out.write("		// 커스텀 오버레이의 컨텐츠 노드에 css class를 추가합니다 \n");
      out.write("		contentNode.className = 'placeinfo_wrap';\n");
      out.write("\n");
      out.write("		// 커스텀 오버레이의 컨텐츠 노드에 mousedown, touchstart 이벤트가 발생했을때\n");
      out.write("		// 지도 객체에 이벤트가 전달되지 않도록 이벤트 핸들러로 kakao.maps.event.preventMap 메소드를 등록합니다 \n");
      out.write("		addEventHandle(contentNode, 'mousedown', kakao.maps.event.preventMap);\n");
      out.write("		addEventHandle(contentNode, 'touchstart', kakao.maps.event.preventMap);\n");
      out.write("		\n");
      out.write("		// 커스텀 오버레이 컨텐츠를 설정합니다\n");
      out.write("		placeOverlay.setContent(contentNode);  \n");
      out.write("		\n");
      out.write("		// 각 카테고리에 클릭 이벤트를 등록합니다\n");
      out.write("		addCategoryClickEvent();\n");
      out.write("		\n");
      out.write("		// 검색 결과 목록이나 마커를 클릭했을 때 장소명을 표출할 인포윈도우를 생성합니다\n");
      out.write("		var infowindow = new kakao.maps.InfoWindow({\n");
      out.write("			zIndex : 1\n");
      out.write("		});\n");
      out.write("\n");
      out.write("		// 키워드로 장소를 검색합니다\n");
      out.write("		searchPlaces();\n");
      out.write("		\n");
      out.write("		/* 키워드로 장소 검색하고 목록으로 표출하기쪽 함수*/\n");
      out.write("		\n");
      out.write("		// 키워드 검색을 요청하는 함수입니다\n");
      out.write("		function searchPlaces_keyword() {\n");
      out.write("\n");
      out.write("			var keyword = document.getElementById('keyword').value;\n");
      out.write("\n");
      out.write("			if (!keyword.replace(/^\\s+|\\s+$/g, '')) {\n");
      out.write("				alert('키워드를 입력해주세요!');\n");
      out.write("				return false;\n");
      out.write("			}\n");
      out.write("\n");
      out.write("			// 장소검색 객체를 통해 키워드로 장소검색을 요청합니다\n");
      out.write("			ps.keywordSearch(keyword, placesSearchCB_keyword);\n");
      out.write("		}\n");
      out.write("\n");
      out.write("		// 장소검색이 완료됐을 때 호출되는 콜백함수 입니다\n");
      out.write("		function placesSearchCB_keyword(data, status, pagination) {\n");
      out.write("			if (status === kakao.maps.services.Status.OK) {\n");
      out.write("\n");
      out.write("				// 정상적으로 검색이 완료됐으면\n");
      out.write("				// 검색 목록과 마커를 표출합니다\n");
      out.write("				displayPlaces_keyword(data);\n");
      out.write("\n");
      out.write("				// 페이지 번호를 표출합니다\n");
      out.write("				displayPagination(pagination);\n");
      out.write("\n");
      out.write("			} else if (status === kakao.maps.services.Status.ZERO_RESULT) {\n");
      out.write("\n");
      out.write("				alert('검색 결과가 존재하지 않습니다.');\n");
      out.write("				return;\n");
      out.write("\n");
      out.write("			} else if (status === kakao.maps.services.Status.ERROR) {\n");
      out.write("\n");
      out.write("				alert('검색 결과 중 오류가 발생했습니다.');\n");
      out.write("				return;\n");
      out.write("\n");
      out.write("			}\n");
      out.write("		}\n");
      out.write("\n");
      out.write("		// 검색 결과 목록과 마커를 표출하는 함수입니다\n");
      out.write("		function displayPlaces_keyword(places) {\n");
      out.write("\n");
      out.write("			var listEl = document.getElementById('placesList'), menuEl = document\n");
      out.write("					.getElementById('menu_wrap'), fragment = document\n");
      out.write("					.createDocumentFragment(), bounds = new kakao.maps.LatLngBounds(), listStr = '';\n");
      out.write("\n");
      out.write("			// 검색 결과 목록에 추가된 항목들을 제거합니다\n");
      out.write("			removeAllChildNods(listEl);\n");
      out.write("\n");
      out.write("			// 지도에 표시되고 있는 마커를 제거합니다\n");
      out.write("			removeMarker();\n");
      out.write("\n");
      out.write("			for (var i = 0; i < places.length; i++) {\n");
      out.write("\n");
      out.write("				// 마커를 생성하고 지도에 표시합니다\n");
      out.write("				var placePosition = new kakao.maps.LatLng(places[i].y,\n");
      out.write("						places[i].x), marker = addMarker_keyword(placePosition, i), itemEl = getListItem(\n");
      out.write("						i, places[i]); // 검색 결과 항목 Element를 생성합니다\n");
      out.write("\n");
      out.write("				// 검색된 장소 위치를 기준으로 지도 범위를 재설정하기위해\n");
      out.write("				// LatLngBounds 객체에 좌표를 추가합니다\n");
      out.write("				bounds.extend(placePosition);\n");
      out.write("				/*\n");
      out.write("				// 마커와 검색결과 항목에 mouseover 했을때\n");
      out.write("				// 해당 장소에 인포윈도우에 장소명을 표시합니다\n");
      out.write("				// mouseout 했을 때는 인포윈도우를 닫습니다\n");
      out.write("				(function(marker, title) {\n");
      out.write("					kakao.maps.event.addListener(marker, 'mouseover',\n");
      out.write("							function() {\n");
      out.write("								displayInfowindow(marker, title);\n");
      out.write("							});\n");
      out.write("\n");
      out.write("					kakao.maps.event.addListener(marker, 'mouseout',\n");
      out.write("							function() {\n");
      out.write("								infowindow.close();\n");
      out.write("							});\n");
      out.write("\n");
      out.write("					itemEl.onmouseover = function() {\n");
      out.write("						displayInfowindow(marker, title);\n");
      out.write("					};\n");
      out.write("\n");
      out.write("					itemEl.onmouseout = function() {\n");
      out.write("						infowindow.close();\n");
      out.write("					};\n");
      out.write("				})(marker, places[i].place_name);*/\n");
      out.write("\n");
      out.write("	            // 마커와 검색결과 항목을 클릭 했을 때\n");
      out.write("	            // 장소정보를 표출하도록 클릭 이벤트를 등록합니다\n");
      out.write("	            (function(marker, place) {\n");
      out.write("	                kakao.maps.event.addListener(marker, 'click', function() {\n");
      out.write("	                    displayPlaceInfo(place);\n");
      out.write("	                });\n");
      out.write("	            })(marker, places[i]);\n");
      out.write("\n");
      out.write("				fragment.appendChild(itemEl);\n");
      out.write("			}\n");
      out.write("			\n");
      out.write("			// 검색결과 항목들을 검색결과 목록 Element에 추가합니다\n");
      out.write("			listEl.appendChild(fragment);\n");
      out.write("			menuEl.scrollTop = 0;\n");
      out.write("\n");
      out.write("			// 검색된 장소 위치를 기준으로 지도 범위를 재설정합니다\n");
      out.write("			map.setBounds(bounds);\n");
      out.write("		}\n");
      out.write("\n");
      out.write("		// 검색결과 항목을 Element로 반환하는 함수입니다\n");
      out.write("		function getListItem(index, places) {\n");
      out.write("\n");
      out.write("			var el = document.createElement('li'), itemStr = '<span class=\"markerbg marker_'\n");
      out.write("					+ (index + 1)\n");
      out.write("					+ '\"></span>'\n");
      out.write("					+ '<div class=\"info\">'\n");
      out.write("					+ '   <h5>' + places.place_name + '</h5>';\n");
      out.write("\n");
      out.write("			if (places.road_address_name) {\n");
      out.write("				itemStr += '    <span>' + places.road_address_name + '</span>'\n");
      out.write("						+ '   <span class=\"jibun gray\">' + places.address_name\n");
      out.write("						+ '</span>';\n");
      out.write("			} else {\n");
      out.write("				itemStr += '    <span>' + places.address_name + '</span>';\n");
      out.write("			}\n");
      out.write("\n");
      out.write("			itemStr += '  <span class=\"tel\">' + places.phone + '</span>'\n");
      out.write("					+ '</div>';\n");
      out.write("\n");
      out.write("			el.innerHTML = itemStr;\n");
      out.write("			el.className = 'item';\n");
      out.write("\n");
      out.write("			return el;\n");
      out.write("		}\n");
      out.write("\n");
      out.write("		// 마커를 생성하고 지도 위에 마커를 표시하는 함수입니다\n");
      out.write("		function addMarker_keyword(position, idx, title) {\n");
      out.write("			var imageSrc = 'https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/marker_number_blue.png', // 마커 이미지 url, 스프라이트 이미지를 씁니다\n");
      out.write("			imageSize = new kakao.maps.Size(36, 37), // 마커 이미지의 크기\n");
      out.write("			imgOptions = {\n");
      out.write("				spriteSize : new kakao.maps.Size(36, 691), // 스프라이트 이미지의 크기\n");
      out.write("				spriteOrigin : new kakao.maps.Point(0, (idx * 46) + 10), // 스프라이트 이미지 중 사용할 영역의 좌상단 좌표\n");
      out.write("				offset : new kakao.maps.Point(13, 37)\n");
      out.write("			// 마커 좌표에 일치시킬 이미지 내에서의 좌표\n");
      out.write("			}, markerImage = new kakao.maps.MarkerImage(imageSrc, imageSize,\n");
      out.write("					imgOptions), marker = new kakao.maps.Marker({\n");
      out.write("				position : position, // 마커의 위치\n");
      out.write("				image : markerImage\n");
      out.write("			});\n");
      out.write("\n");
      out.write("			marker.setMap(map); // 지도 위에 마커를 표출합니다\n");
      out.write("			markers.push(marker); // 배열에 생성된 마커를 추가합니다\n");
      out.write("\n");
      out.write("			return marker;\n");
      out.write("		}\n");
      out.write("\n");
      out.write("		// 지도 위에 표시되고 있는 마커를 모두 제거합니다\n");
      out.write("		function removeMarker() {\n");
      out.write("			for (var i = 0; i < markers.length; i++) {\n");
      out.write("				markers[i].setMap(null);\n");
      out.write("			}\n");
      out.write("			markers = [];\n");
      out.write("		}\n");
      out.write("\n");
      out.write("		// 검색결과 목록 하단에 페이지번호를 표시는 함수입니다\n");
      out.write("		function displayPagination(pagination) {\n");
      out.write("			var paginationEl = document.getElementById('pagination'), fragment = document\n");
      out.write("					.createDocumentFragment(), i;\n");
      out.write("\n");
      out.write("			// 기존에 추가된 페이지번호를 삭제합니다\n");
      out.write("			while (paginationEl.hasChildNodes()) {\n");
      out.write("				paginationEl.removeChild(paginationEl.lastChild);\n");
      out.write("			}\n");
      out.write("\n");
      out.write("			for (i = 1; i <= pagination.last; i++) {\n");
      out.write("				var el = document.createElement('a');\n");
      out.write("				el.href = \"#\";\n");
      out.write("				el.innerHTML = i;\n");
      out.write("\n");
      out.write("				if (i === pagination.current) {\n");
      out.write("					el.className = 'on';\n");
      out.write("				} else {\n");
      out.write("					el.onclick = (function(i) {\n");
      out.write("						return function() {\n");
      out.write("							pagination.gotoPage(i);\n");
      out.write("						}\n");
      out.write("					})(i);\n");
      out.write("				}\n");
      out.write("\n");
      out.write("				fragment.appendChild(el);\n");
      out.write("			}\n");
      out.write("			paginationEl.appendChild(fragment);\n");
      out.write("		}\n");
      out.write("\n");
      out.write("		// 검색결과 목록 또는 마커를 클릭했을 때 호출되는 함수입니다\n");
      out.write("		// 인포윈도우에 장소명을 표시합니다\n");
      out.write("		function displayInfowindow(marker, title) {\n");
      out.write("			var content = '<div style=\"padding:5px;z-index:1;\">' + title\n");
      out.write("					+ '</div>';\n");
      out.write("\n");
      out.write("			infowindow.setContent(content);\n");
      out.write("			infowindow.open(map, marker);\n");
      out.write("		}\n");
      out.write("\n");
      out.write("		// 검색결과 목록의 자식 Element를 제거하는 함수입니다\n");
      out.write("		function removeAllChildNods(el) {\n");
      out.write("			while (el.hasChildNodes()) {\n");
      out.write("				el.removeChild(el.lastChild);\n");
      out.write("			}\n");
      out.write("		}\n");
      out.write("		\n");
      out.write("		/* =============키워드로 장속 검색하고 목록으로 표출하기쪽 함수 끝===========*/\n");
      out.write("		\n");
      out.write("		/* =============카테고리별 장소 검색하기 함수 ===========*/\n");
      out.write("		// 엘리먼트에 이벤트 핸들러를 등록하는 함수입니다\n");
      out.write("		function addEventHandle(target, type, callback) {\n");
      out.write("		    if (target.addEventListener) {\n");
      out.write("		        target.addEventListener(type, callback);\n");
      out.write("		    } else {\n");
      out.write("		        target.attachEvent('on' + type, callback);\n");
      out.write("		    }\n");
      out.write("		}\n");
      out.write("		\n");
      out.write("		// 카테고리 검색을 요청하는 함수입니다\n");
      out.write("		function searchPlaces() {\n");
      out.write("		    if (!currCategory) {\n");
      out.write("		        return;\n");
      out.write("		    }\n");
      out.write("		    \n");
      out.write("		    // 커스텀 오버레이를 숨깁니다 \n");
      out.write("		    placeOverlay.setMap(null);\n");
      out.write("		\n");
      out.write("		    // 지도에 표시되고 있는 마커를 제거합니다\n");
      out.write("		    removeMarker();\n");
      out.write("		    \n");
      out.write("		    ps.categorySearch(currCategory, placesSearchCB, {useMapBounds:true}); \n");
      out.write("		}\n");
      out.write("		\n");
      out.write("		// 장소검색이 완료됐을 때 호출되는 콜백함수 입니다\n");
      out.write("		function placesSearchCB(data, status, pagination) {\n");
      out.write("		    if (status === kakao.maps.services.Status.OK) {\n");
      out.write("		\n");
      out.write("		        // 정상적으로 검색이 완료됐으면 지도에 마커를 표출합니다\n");
      out.write("		        displayPlaces(data);\n");
      out.write("		    } else if (status === kakao.maps.services.Status.ZERO_RESULT) {\n");
      out.write("		        // 검색결과가 없는경우 해야할 처리가 있다면 이곳에 작성해 주세요\n");
      out.write("		\n");
      out.write("		    } else if (status === kakao.maps.services.Status.ERROR) {\n");
      out.write("		        // 에러로 인해 검색결과가 나오지 않은 경우 해야할 처리가 있다면 이곳에 작성해 주세요\n");
      out.write("		        \n");
      out.write("		    }\n");
      out.write("		}\n");
      out.write("		\n");
      out.write("		// 지도에 마커를 표출하는 함수입니다\n");
      out.write("		function displayPlaces(places) {\n");
      out.write("		\n");
      out.write("		    // 몇번째 카테고리가 선택되어 있는지 얻어옵니다\n");
      out.write("		    // 이 순서는 스프라이트 이미지에서의 위치를 계산하는데 사용됩니다\n");
      out.write("		    var order = document.getElementById(currCategory).getAttribute('data-order');\n");
      out.write("		\n");
      out.write("		    \n");
      out.write("		    for ( var i=0; i<places.length; i++ ) {\n");
      out.write("		\n");
      out.write("		            // 마커를 생성하고 지도에 표시합니다\n");
      out.write("		            var marker = addMarker(new kakao.maps.LatLng(places[i].y, places[i].x), order);\n");
      out.write("		\n");
      out.write("		            // 마커와 검색결과 항목을 클릭 했을 때\n");
      out.write("		            // 장소정보를 표출하도록 클릭 이벤트를 등록합니다\n");
      out.write("		            (function(marker, place) {\n");
      out.write("		                kakao.maps.event.addListener(marker, 'click', function() {\n");
      out.write("		                    displayPlaceInfo(place);\n");
      out.write("		                });\n");
      out.write("		            })(marker, places[i]);\n");
      out.write("		    }\n");
      out.write("		}\n");
      out.write("		\n");
      out.write("		// 마커를 생성하고 지도 위에 마커를 표시하는 함수입니다\n");
      out.write("		function addMarker(position, order) {\n");
      out.write("		    var imageSrc = 'https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/places_category.png', // 마커 이미지 url, 스프라이트 이미지를 씁니다\n");
      out.write("		        imageSize = new kakao.maps.Size(27, 28),  // 마커 이미지의 크기\n");
      out.write("		        imgOptions =  {\n");
      out.write("		            spriteSize : new kakao.maps.Size(72, 208), // 스프라이트 이미지의 크기\n");
      out.write("		            spriteOrigin : new kakao.maps.Point(46, (order*36)), // 스프라이트 이미지 중 사용할 영역의 좌상단 좌표\n");
      out.write("		            offset: new kakao.maps.Point(11, 28) // 마커 좌표에 일치시킬 이미지 내에서의 좌표\n");
      out.write("		        },\n");
      out.write("		        markerImage = new kakao.maps.MarkerImage(imageSrc, imageSize, imgOptions),\n");
      out.write("		            marker = new kakao.maps.Marker({\n");
      out.write("		            position: position, // 마커의 위치\n");
      out.write("		            image: markerImage \n");
      out.write("		        });\n");
      out.write("		\n");
      out.write("		    marker.setMap(map); // 지도 위에 마커를 표출합니다\n");
      out.write("		    markers.push(marker);  // 배열에 생성된 마커를 추가합니다\n");
      out.write("		\n");
      out.write("		    return marker;\n");
      out.write("		}\n");
      out.write("		\n");
      out.write("		\n");
      out.write("		// 클릭한 마커에 대한 장소 상세정보를 커스텀 오버레이로 표시하는 함수입니다\n");
      out.write("		function displayPlaceInfo (place) {\n");
      out.write("		    var content = '<div class=\"placeinfo\">' +\n");
      out.write("		                    '   <a class=\"title\" href=\"' + place.place_url + '\" target=\"_blank\" title=\"' + place.place_name + '\">' + place.place_name + '</a>';   \n");
      out.write("		\n");
      out.write("		    if (place.road_address_name) {\n");
      out.write("		        content += '    <span title=\"' + place.road_address_name + '\">' + place.road_address_name + '</span>' +\n");
      out.write("		                    '  <span class=\"jibun\" title=\"' + place.address_name + '\">(지번 : ' + place.address_name + ')</span>';\n");
      out.write("		    }  else {\n");
      out.write("		        content += '    <span title=\"' + place.address_name + '\">' + place.address_name + '</span>';\n");
      out.write("		    }                \n");
      out.write("		   \n");
      out.write("		    content += '    <span class=\"tel\">' + place.phone + '</span>' + \n");
      out.write("		                '</div>' + \n");
      out.write("		                '<div class=\"after\"></div>';\n");
      out.write("		\n");
      out.write("		    contentNode.innerHTML = content;\n");
      out.write("		    placeOverlay.setPosition(new kakao.maps.LatLng(place.y, place.x));\n");
      out.write("		    placeOverlay.setMap(map);  \n");
      out.write("		}\n");
      out.write("		\n");
      out.write("		\n");
      out.write("		// 각 카테고리에 클릭 이벤트를 등록합니다\n");
      out.write("		function addCategoryClickEvent() {\n");
      out.write("		    var category = document.getElementById('category'),\n");
      out.write("		        children = category.children;\n");
      out.write("		\n");
      out.write("		    for (var i=0; i<children.length; i++) {\n");
      out.write("		        children[i].onclick = onClickCategory;\n");
      out.write("		    }\n");
      out.write("		}\n");
      out.write("		\n");
      out.write("		// 카테고리를 클릭했을 때 호출되는 함수입니다\n");
      out.write("		function onClickCategory() {\n");
      out.write("		    var id = this.id,\n");
      out.write("		        className = this.className;\n");
      out.write("		\n");
      out.write("		    placeOverlay.setMap(null);\n");
      out.write("		\n");
      out.write("		    if (className === 'on') {\n");
      out.write("		        currCategory = '';\n");
      out.write("		        changeCategoryClass();\n");
      out.write("		        removeMarker();\n");
      out.write("		    } else {\n");
      out.write("		        currCategory = id;\n");
      out.write("		        changeCategoryClass(this);\n");
      out.write("		        searchPlaces();\n");
      out.write("		    }\n");
      out.write("		}\n");
      out.write("		\n");
      out.write("		// 클릭된 카테고리에만 클릭된 스타일을 적용하는 함수입니다\n");
      out.write("		function changeCategoryClass(el) {\n");
      out.write("		    var category = document.getElementById('category'),\n");
      out.write("		        children = category.children,\n");
      out.write("		        i;\n");
      out.write("		\n");
      out.write("		    for ( i=0; i<children.length; i++ ) {\n");
      out.write("		        children[i].className = '';\n");
      out.write("		    }\n");
      out.write("		\n");
      out.write("		    if (el) {\n");
      out.write("		        el.className = 'on';\n");
      out.write("		    } \n");
      out.write("		} \n");
      out.write("		/* =============카테고리별 장소 검색하기 함수 끝===========*/\n");
      out.write("	</script>\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
