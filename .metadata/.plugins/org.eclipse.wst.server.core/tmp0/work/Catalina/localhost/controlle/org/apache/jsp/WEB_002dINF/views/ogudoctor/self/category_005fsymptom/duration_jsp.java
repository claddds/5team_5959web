/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.76
 * Generated at: 2023-08-25 09:14:24 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.ogudoctor.self.category_005fsymptom;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class duration_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>지속시기</title>\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("	.duration{\r\n");
      out.write("		font-family: \"Inter\", sans-serif;\r\n");
      out.write("		color: $text-color;\r\n");
      out.write("		font-size: calc(1em + 1.25vw);\r\n");
      out.write("		background-color: mix(#fff, $primary-color, 90%);\r\n");
      out.write("	}\r\n");
      out.write("	form {\r\n");
      out.write("  display: flex;\r\n");
      out.write("  flex-wrap: wrap;\r\n");
      out.write("  flex-direction: column;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("label {\r\n");
      out.write("  display: flex;\r\n");
      out.write("  cursor: pointer;\r\n");
      out.write("  font-weight: 500;\r\n");
      out.write("  position: relative;\r\n");
      out.write("  overflow: hidden;\r\n");
      out.write("  margin-bottom: 0.375em;\r\n");
      out.write("  /* Accessible outline */\r\n");
      out.write("  /* Remove comment to use */ \r\n");
      out.write("  /*\r\n");
      out.write("    &:focus-within {\r\n");
      out.write("        outline: .125em solid $primary-color;\r\n");
      out.write("    }\r\n");
      out.write("  */\r\n");
      out.write("  input {\r\n");
      out.write("    position: absolute;\r\n");
      out.write("    left: -9999px;\r\n");
      out.write("    &:checked + span {\r\n");
      out.write("      background-color: mix(#fff, $primary-color, 84%);\r\n");
      out.write("      &:before {\r\n");
      out.write("        box-shadow: inset 0 0 0 0.4375em $primary-color;\r\n");
      out.write("      }\r\n");
      out.write("    }\r\n");
      out.write("  }\r\n");
      out.write("  span {\r\n");
      out.write("    display: flex;\r\n");
      out.write("    align-items: center;\r\n");
      out.write("    padding: 0.375em 0.75em 0.375em 0.375em;\r\n");
      out.write("    border-radius: 99em; // or something higher...\r\n");
      out.write("    transition: 0.25s ease;\r\n");
      out.write("    &:hover {\r\n");
      out.write("      background-color: mix(#fff, $primary-color, 84%);\r\n");
      out.write("    }\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<div class=\"duration\">\r\n");
      out.write("		<div class=\"duration_ex\">\r\n");
      out.write("			<h3>증상의 지속기간이 길수록 단순한 증상이 아닌 질병일 확률이 커집니다.</h3>\r\n");
      out.write("			<br>\r\n");
      out.write("			<h3>아래 항목 중 선택해주세요.</h3>\r\n");
      out.write("		</div>\r\n");
      out.write("		<div class=\"duration_text\">\r\n");
      out.write("			<h2>필수</h2>\r\n");
      out.write("			<h2>지속시기</h2>\r\n");
      out.write("		</div>\r\n");
      out.write("		<div class=\"duration_check\">\r\n");
      out.write("			<form>\r\n");
      out.write("				<label>\r\n");
      out.write("					<input type=\"radio\" name=\"duration\" checked/>\r\n");
      out.write("					<span>1일 이내</span>\r\n");
      out.write("				</label>\r\n");
      out.write("				<label>\r\n");
      out.write("					<input type=\"radio\" name=\"duration\" checked/>\r\n");
      out.write("					<span>3일 이내</span>\r\n");
      out.write("				</label>\r\n");
      out.write("				<label>\r\n");
      out.write("					<input type=\"radio\" name=\"duration\" checked/>\r\n");
      out.write("					<span>1주일 미만</span>\r\n");
      out.write("				</label>\r\n");
      out.write("				<label>\r\n");
      out.write("					<input type=\"radio\" name=\"duration\" checked/>\r\n");
      out.write("					<span>1주일 이상</span>\r\n");
      out.write("				</label>\r\n");
      out.write("			</form>\r\n");
      out.write("		</div>\r\n");
      out.write("	</div>\r\n");
      out.write("	\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
