/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.76
 * Generated at: 2023-08-28 11:13:06 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.place;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class place_005fmain_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("    \r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("	<meta charset=\"utf-8\">\r\n");
      out.write("	<title>플레이스</title>\r\n");
      out.write("	<style type=\"text/css\">\r\n");
      out.write("		#minibanner img{\r\n");
      out.write("			width:1920px;\r\n");
      out.write("			height:200px;\r\n");
      out.write("			display:flex;\r\n");
      out.write("			margin:auto;\r\n");
      out.write("			margin-top:20px;\r\n");
      out.write("			margin-bottom: 20px;\r\n");
      out.write("	    }\r\n");
      out.write("	    \r\n");
      out.write("		#map{\r\n");
      out.write("			width: 1600px;\r\n");
      out.write("			text-align: center;\r\n");
      out.write("			margin: 0 auto;\r\n");
      out.write("			display: grid;\r\n");
      out.write("			place-items: center;\r\n");
      out.write("			gap:15px;\r\n");
      out.write("			\r\n");
      out.write("		}\r\n");
      out.write("	</style>\r\n");
      out.write("	<script type=\"text/javascript\">\r\n");
      out.write("	</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<header>\r\n");
      out.write("		");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/WEB-INF/views/home/home_top.jsp", out, false);
      out.write("\r\n");
      out.write("	</header>\r\n");
      out.write("	\r\n");
      out.write("	<div id=minibanner>\r\n");
      out.write("        <a href=\"\"><img src=\"resources/images/list_banner/minibanner_eduexplain.png\"></a>\r\n");
      out.write("    </div>\r\n");
      out.write("    \r\n");
      out.write("    <div class=\"search_map\">\r\n");
      out.write("    	<div class=\"\">\r\n");
      out.write("    		<aside class=\"\">\r\n");
      out.write("    		</aside>\r\n");
      out.write("    	</div>\r\n");
      out.write("    	<div id=\"map\" style=\"width:900px;height:700px;\"></div>\r\n");
      out.write("    </div>\r\n");
      out.write("	\r\n");
      out.write("	<script src=\"//dapi.kakao.com/v2/maps/sdk.js?appkey=208825c3c44bfdb13dfa9f140f9c81f1\"></script>\r\n");
      out.write("	<script>\r\n");
      out.write("		var mapContainer = document.getElementById('map'), // 지도를 표시할 div \r\n");
      out.write("		    mapOption = {\r\n");
      out.write("		        center: new kakao.maps.LatLng(37.56975, 126.97748), // 지도의 중심좌표\r\n");
      out.write("		        level: 3, // 지도의 확대 레벨\r\n");
      out.write("		        mapTypeId : kakao.maps.MapTypeId.ROADMAP // 지도종류\r\n");
      out.write("		    }; \r\n");
      out.write("\r\n");
      out.write("		// 지도를 생성한다 \r\n");
      out.write("		var map = new kakao.maps.Map(mapContainer, mapOption); \r\n");
      out.write("		// 장소 검색 객체를 생성합니다\r\n");
      out.write("		var ps = new kakao.maps.services.Places(); \r\n");
      out.write("		// 키워드로 장소를 검색합니다\r\n");
      out.write("		ps.keywordSearch('동물병원', placesSearchCB); \r\n");
      out.write("		// 지도 타입 변경 컨트롤을 생성한다\r\n");
      out.write("		var mapTypeControl = new kakao.maps.MapTypeControl();\r\n");
      out.write("		// 지도의 상단 우측에 지도 타입 변경 컨트롤을 추가한다\r\n");
      out.write("		map.addControl(mapTypeControl, kakao.maps.ControlPosition.TOPRIGHT);	\r\n");
      out.write("		// 지도에 확대 축소 컨트롤을 생성한다\r\n");
      out.write("		var zoomControl = new kakao.maps.ZoomControl();\r\n");
      out.write("		// 지도의 우측에 확대 축소 컨트롤을 추가한다\r\n");
      out.write("		map.addControl(zoomControl, kakao.maps.ControlPosition.RIGHT);\r\n");
      out.write("		// 지도 중심 좌표 변화 이벤트를 등록한다\r\n");
      out.write("		kakao.maps.event.addListener(map, 'center_changed', function () {\r\n");
      out.write("			console.log('지도의 중심 좌표는 ' + map.getCenter().toString() +' 입니다.');\r\n");
      out.write("		});\r\n");
      out.write("		// 지도 확대 레벨 변화 이벤트를 등록한다\r\n");
      out.write("		kakao.maps.event.addListener(map, 'zoom_changed', function () {\r\n");
      out.write("			console.log('지도의 현재 확대레벨은 ' + map.getLevel() +'레벨 입니다.');\r\n");
      out.write("		});\r\n");
      out.write("		// 지도 영역 변화 이벤트를 등록한다\r\n");
      out.write("		kakao.maps.event.addListener(map, 'bounds_changed', function () {\r\n");
      out.write("			var mapBounds = map.getBounds(),\r\n");
      out.write("				message = '지도의 남서쪽, 북동쪽 영역좌표는 ' +\r\n");
      out.write("							mapBounds.toString() + '입니다.';\r\n");
      out.write("			console.log(message);	\r\n");
      out.write("		});\r\n");
      out.write("		// 지도 시점 변화 완료 이벤트를 등록한다\r\n");
      out.write("		kakao.maps.event.addListener(map, 'idle', function () {\r\n");
      out.write("			var message = '지도의 중심좌표는 ' + map.getCenter().toString() + ' 이고,' + \r\n");
      out.write("							'확대 레벨은 ' + map.getLevel() + ' 레벨 입니다.';\r\n");
      out.write("			console.log(message);\r\n");
      out.write("		});\r\n");
      out.write("		// 지도 클릭 이벤트를 등록한다 (좌클릭 : click, 우클릭 : rightclick, 더블클릭 : dblclick)\r\n");
      out.write("		kakao.maps.event.addListener(map, 'click', function (mouseEvent) {\r\n");
      out.write("			console.log('지도에서 클릭한 위치의 좌표는 ' + mouseEvent.latLng.toString() + ' 입니다.');\r\n");
      out.write("		});	\r\n");
      out.write("		// 지도 드래깅 이벤트를 등록한다 (드래그 시작 : dragstart, 드래그 종료 : dragend)\r\n");
      out.write("		kakao.maps.event.addListener(map, 'drag', function () {\r\n");
      out.write("			var message = '지도를 드래그 하고 있습니다. ' + \r\n");
      out.write("							'지도의 중심 좌표는 ' + map.getCenter().toString() +' 입니다.';\r\n");
      out.write("			console.log(message);\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("		// HTML5의 geolocation으로 사용할 수 있는지 확인합니다 \r\n");
      out.write("		if (navigator.geolocation) {\r\n");
      out.write("		    \r\n");
      out.write("		    // GeoLocation을 이용해서 접속 위치를 얻어옵니다\r\n");
      out.write("		    navigator.geolocation.getCurrentPosition(function(position) {\r\n");
      out.write("		        \r\n");
      out.write("		        var lat = position.coords.latitude, // 위도\r\n");
      out.write("		            lon = position.coords.longitude; // 경도\r\n");
      out.write("		        \r\n");
      out.write("		        var locPosition = new kakao.maps.LatLng(lat, lon), // 마커가 표시될 위치를 geolocation으로 얻어온 좌표로 생성합니다\r\n");
      out.write("		            message = '<div style=\"padding:5px;\">현재위치</div>'; // 인포윈도우에 표시될 내용입니다\r\n");
      out.write("		        \r\n");
      out.write("		        // 마커와 인포윈도우를 표시합니다\r\n");
      out.write("		        displayMarker(locPosition, message);\r\n");
      out.write("		            \r\n");
      out.write("		      });\r\n");
      out.write("		    \r\n");
      out.write("		} else { // HTML5의 GeoLocation을 사용할 수 없을때 마커 표시 위치와 인포윈도우 내용을 설정합니다\r\n");
      out.write("		    \r\n");
      out.write("		    var locPosition = new kakao.maps.LatLng(33.450701, 126.570667),    \r\n");
      out.write("		        message = 'geolocation을 사용할수 없어요..'\r\n");
      out.write("		        \r\n");
      out.write("		    displayMarker(locPosition, message);\r\n");
      out.write("		}\r\n");
      out.write("\r\n");
      out.write("		// 지도에 마커와 인포윈도우를 표시하는 함수입니다\r\n");
      out.write("		function displayMarker(locPosition, message) {\r\n");
      out.write("\r\n");
      out.write("		    // 마커를 생성합니다\r\n");
      out.write("		    var marker = new kakao.maps.Marker({  \r\n");
      out.write("		        map: map, \r\n");
      out.write("		        position: locPosition\r\n");
      out.write("		    }); \r\n");
      out.write("		    \r\n");
      out.write("		    var iwContent = message, // 인포윈도우에 표시할 내용\r\n");
      out.write("		        iwRemoveable = true;\r\n");
      out.write("\r\n");
      out.write("		    // 인포윈도우를 생성합니다\r\n");
      out.write("		    var infowindow = new kakao.maps.InfoWindow({\r\n");
      out.write("		        content : iwContent,\r\n");
      out.write("		        removable : iwRemoveable\r\n");
      out.write("		    });\r\n");
      out.write("		    \r\n");
      out.write("		    // 인포윈도우를 마커위에 표시합니다 \r\n");
      out.write("		    infowindow.open(map, marker);\r\n");
      out.write("		    \r\n");
      out.write("		    // 지도 중심좌표를 접속위치로 변경합니다\r\n");
      out.write("		    map.setCenter(locPosition);      \r\n");
      out.write("		}    \r\n");
      out.write("		//키워드부분\r\n");
      out.write("	    // 키워드 검색 완료 시 호출되는 콜백함수 입니다\r\n");
      out.write("		function placesSearchCB (data, status, pagination) {\r\n");
      out.write("	    	if (status === kakao.maps.services.Status.OK) {\r\n");
      out.write("\r\n");
      out.write("	        // 검색된 장소 위치를 기준으로 지도 범위를 재설정하기위해\r\n");
      out.write("	        // LatLngBounds 객체에 좌표를 추가합니다\r\n");
      out.write("	        var bounds = new kakao.maps.LatLngBounds();\r\n");
      out.write("\r\n");
      out.write("	        for (var i=0; i<data.length; i++) {\r\n");
      out.write("	            displayMarker(data[i]);    \r\n");
      out.write("	            bounds.extend(new kakao.maps.LatLng(data[i].y, data[i].x));\r\n");
      out.write("	        }       \r\n");
      out.write("\r\n");
      out.write("	        // 검색된 장소 위치를 기준으로 지도 범위를 재설정합니다\r\n");
      out.write("	        map.setBounds(bounds);\r\n");
      out.write("	    } \r\n");
      out.write("	}\r\n");
      out.write("\r\n");
      out.write("	// 지도에 마커를 표시하는 함수입니다\r\n");
      out.write("	function displayMarker(place) {\r\n");
      out.write("	    \r\n");
      out.write("	    // 마커를 생성하고 지도에 표시합니다\r\n");
      out.write("	    var marker = new kakao.maps.Marker({\r\n");
      out.write("	        map: map,\r\n");
      out.write("	        position: new kakao.maps.LatLng(place.y, place.x) \r\n");
      out.write("	    });\r\n");
      out.write("\r\n");
      out.write("	    // 마커에 클릭이벤트를 등록합니다\r\n");
      out.write("	    kakao.maps.event.addListener(marker, 'click', function() {\r\n");
      out.write("	        // 마커를 클릭하면 장소명이 인포윈도우에 표출됩니다\r\n");
      out.write("	        infowindow.setContent('<div style=\"padding:5px;font-size:12px;\">' + place.place_name + '</div>');\r\n");
      out.write("	        infowindow.open(map, marker);\r\n");
      out.write("	    });\r\n");
      out.write("	}\r\n");
      out.write("	</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
